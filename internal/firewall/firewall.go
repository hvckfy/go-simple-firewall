package firewall

import (
	"fmt"
	"net/http"
	"net/http/httputil"
	"net/url"
	"strings"
	"sync"
	"time"

	"go-simple-firewall/internal/admin"
	"go-simple-firewall/internal/config"
	"go-simple-firewall/internal/ddos"
	"go-simple-firewall/internal/logger"
	"go-simple-firewall/internal/ratelimit"
	"go-simple-firewall/internal/security"
	"go-simple-firewall/internal/stats"
	"go-simple-firewall/pkg/utils"
)

// Firewall –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ firewall
type Firewall struct {
	config           *config.Config
	rateLimiter      *ratelimit.Limiter
	proxy            *httputil.ReverseProxy
	logger           *logger.Logger
	adminPanel       *admin.Handler
	firewallServer   *http.Server
	adminServer      *http.Server
	stats            *stats.Stats
	securityChecker  *security.SecurityChecker
	ddosProtection   *ddos.DDoSProtection
	mutex            sync.RWMutex
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π firewall
func New(cfg *config.Config) (*Firewall, error) {
	// –°–æ–∑–¥–∞–µ–º logger
	log, err := logger.New(cfg.EnableLogging)
	if err != nil {
		return nil, fmt.Errorf("failed to create logger: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º rate limiter
	rateLimiter := ratelimit.New(cfg.RateLimitRPS)

	// –°–æ–∑–¥–∞–µ–º proxy
	targetURL, err := url.Parse(fmt.Sprintf("http://localhost:%d", cfg.TargetPort))
	if err != nil {
		return nil, fmt.Errorf("invalid target URL: %v", err)
	}
	proxy := httputil.NewSingleHostReverseProxy(targetURL)

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	statistics := stats.New()

	// –°–æ–∑–¥–∞–µ–º security checker
	securityChecker := security.New(cfg)

	// –°–æ–∑–¥–∞–µ–º DDoS –∑–∞—â–∏—Ç—É
	ddosProtection := ddos.New(cfg)

	// –°–æ–∑–¥–∞–µ–º admin panel
	adminPanel := admin.New(cfg, log, statistics)

	fw := &Firewall{
		config:          cfg,
		rateLimiter:     rateLimiter,
		proxy:           proxy,
		logger:          log,
		adminPanel:      adminPanel,
		stats:           statistics,
		securityChecker: securityChecker,
		ddosProtection:  ddosProtection,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
	go fw.cleanupExpiredBans()

	return fw, nil
}

// cleanupExpiredBans –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –±–∞–Ω—ã
func (fw *Firewall) cleanupExpiredBans() {
	ticker := time.NewTicker(10 * time.Minute)
	defer ticker.Stop()
	
	for {
		select {
		case <-ticker.C:
			fw.mutex.Lock()
			oldCount := len(fw.config.TemporaryBans)
			fw.config.CleanupExpiredBans()
			newCount := len(fw.config.TemporaryBans)
			
			if oldCount != newCount {
				fw.logger.LogInfo(fmt.Sprintf("Cleaned up %d expired temporary bans", oldCount-newCount))
				fw.config.Save()
			}
			fw.mutex.Unlock()
		}
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç firewall –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
func (fw *Firewall) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go fw.startAdminServer()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π firewall —Å–µ—Ä–≤–µ—Ä
	return fw.startFirewallServer()
}

// startFirewallServer –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π firewall —Å–µ—Ä–≤–µ—Ä
func (fw *Firewall) startFirewallServer() error {
	fw.firewallServer = &http.Server{
		Addr:    fmt.Sprintf(":%d", fw.config.ListenPort),
		Handler: http.HandlerFunc(fw.ServeHTTP),
	}

	fw.logger.LogInfo(fmt.Sprintf("Firewall started on port %d, proxying to %d", fw.config.ListenPort, fw.config.TargetPort))
	fmt.Printf("üî• Firewall started on port %d, proxying to %d\n", fw.config.ListenPort, fw.config.TargetPort)
	fmt.Printf("üìä Admin panel: http://localhost:%d/admin\n", fw.config.AdminPort)

	return fw.firewallServer.ListenAndServe()
}

// startAdminServer –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
func (fw *Firewall) startAdminServer() error {
	mux := http.NewServeMux()
	
	// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ API
	mux.HandleFunc("/admin", fw.adminPanel.ServeHTTP)
	mux.HandleFunc("/admin/", fw.adminPanel.ServeHTTP)
	mux.HandleFunc("/admin/api/", fw.adminPanel.ServeHTTP)

	fw.adminServer = &http.Server{
		Addr:    fmt.Sprintf(":%d", fw.config.AdminPort),
		Handler: mux,
	}

	fw.logger.LogInfo(fmt.Sprintf("Admin panel started on port %d", fw.config.AdminPort))
	fmt.Printf("üìä Admin panel started on port %d\n", fw.config.AdminPort)

	return fw.adminServer.ListenAndServe()
}

// ServeHTTP –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã firewall
func (fw *Firewall) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	clientIP := utils.GetClientIP(r)
	userAgent := r.UserAgent()
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
	if blocked, reason := fw.isBlocked(r); blocked {
		// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		fw.logger.LogRequestWithReason(r, "BLOCKED", 403, reason)
		
		// –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –∞—Ç–∞–∫—É –µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞
		if fw.isSecurityThreat(reason) {
			fw.logger.LogAttack(clientIP, fw.getAttackType(reason), reason, userAgent, r.URL.String())
		}
		
		fw.stats.RecordRequest(clientIP, userAgent, true)
		http.Error(w, "Access Denied", http.StatusForbidden)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
	fw.logger.LogRequest(r, "ALLOWED", 200)
	fw.stats.RecordRequest(clientIP, userAgent, false)
	
	// –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
	fw.proxy.ServeHTTP(w, r)
}

// isSecurityThreat –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–≥—Ä–æ–∑–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func (fw *Firewall) isSecurityThreat(reason string) bool {
	threats := []string{
		"SQL injection", "XSS attempt", "Scanner attempt", 
		"Forbidden suffix", "DDoS attack", "Suspicious bot",
		"Protected directory",
	}
	
	reasonLower := strings.ToLower(reason)
	for _, threat := range threats {
		if strings.Contains(reasonLower, strings.ToLower(threat)) {
			return true
		}
	}
	
	return false
}

// getAttackType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞—Ç–∞–∫–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
func (fw *Firewall) getAttackType(reason string) string {
	reasonLower := strings.ToLower(reason)
	
	if strings.Contains(reasonLower, "sql") {
		return "SQL_INJECTION"
	}
	if strings.Contains(reasonLower, "xss") {
		return "XSS"
	}
	if strings.Contains(reasonLower, "scanner") {
		return "SCANNER"
	}
	if strings.Contains(reasonLower, "ddos") {
		return "DDOS"
	}
	if strings.Contains(reasonLower, "bot") {
		return "BOT"
	}
	if strings.Contains(reasonLower, "suffix") {
		return "MALICIOUS_FILE"
	}
	if strings.Contains(reasonLower, "directory") {
		return "DIRECTORY_TRAVERSAL"
	}
	
	return "UNKNOWN"
}

// isBlocked –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
func (fw *Firewall) isBlocked(r *http.Request) (bool, string) {
	fw.mutex.RLock()
	defer fw.mutex.RUnlock()

	if !fw.config.EnableFirewall {
		return false, ""
	}

	clientIP := utils.GetClientIP(r)
	userAgent := strings.ToLower(r.UserAgent())

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö IP
	if fw.config.BannedIPs[clientIP] {
		return true, "IP permanently banned"
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç)
	if len(fw.config.AllowedIPs) > 0 && !fw.config.AllowedIPs[clientIP] {
		return true, "IP not in whitelist"
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ User-Agent whitelist (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º whitelist)
	if len(fw.config.AllowedUAs) > 0 {
		allowed := false
		for _, allowedUA := range fw.config.AllowedUAs {
			if strings.Contains(userAgent, strings.ToLower(allowedUA)) {
				allowed = true
				break
			}
		}
		if !allowed {
			return true, "User-Agent not in whitelist"
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
	if !fw.rateLimiter.IsAllowed(clientIP) {
		return true, "Rate limit exceeded"
	}

	// DDoS –∑–∞—â–∏—Ç–∞
	if blocked, reason := fw.ddosProtection.CheckRequest(clientIP); blocked {
		// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
		fw.logger.LogTemporaryBan(clientIP, reason, time.Duration(fw.config.Security.DDoSBanDuration)*time.Minute)
		return true, reason
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	if blocked, reason := fw.securityChecker.CheckRequest(r); blocked {
		// –ï—Å–ª–∏ —ç—Ç–æ —Å—É—Ñ—Ñ–∏–∫—Å, –ª–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
		if strings.Contains(reason, "Forbidden suffix") {
			duration := time.Duration(fw.config.Security.SuffixBanDuration) * time.Hour
			fw.logger.LogTemporaryBan(clientIP, reason, duration)
		}
		return true, reason
	}

	return false, ""
}

// UpdateConfig –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (fw *Firewall) UpdateConfig(newConfig *config.Config) error {
	fw.mutex.Lock()
	defer fw.mutex.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º rate limiter –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏–º–∏—Ç
	if fw.config.RateLimitRPS != newConfig.RateLimitRPS {
		fw.rateLimiter.UpdateLimit(newConfig.RateLimitRPS)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º proxy –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è target port
	if fw.config.TargetPort != newConfig.TargetPort {
		targetURL, err := url.Parse(fmt.Sprintf("http://localhost:%d", newConfig.TargetPort))
		if err != nil {
			return fmt.Errorf("invalid target URL: %v", err)
		}
		fw.proxy = httputil.NewSingleHostReverseProxy(targetURL)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º logger –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	if fw.config.EnableLogging != newConfig.EnableLogging {
		fw.logger.SetEnabled(newConfig.EnableLogging)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º security checker –∏ ddos protection
	fw.securityChecker.UpdateConfig(newConfig)
	fw.ddosProtection.UpdateConfig(newConfig)

	fw.config = newConfig
	return fw.config.Save()
}

// Shutdown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É firewall
func (fw *Firewall) Shutdown() {
	fw.logger.LogInfo("Firewall shutting down")
	
	if fw.firewallServer != nil {
		fw.firewallServer.Close()
	}

	if fw.adminServer != nil {
		fw.adminServer.Close()
	}

	if fw.logger != nil {
		fw.logger.Close()
	}

	if fw.config != nil {
		fw.config.Save()
	}
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É firewall
func (fw *Firewall) GetStats() map[string]interface{} {
	fw.mutex.RLock()
	defer fw.mutex.RUnlock()

	return map[string]interface{}{
		"firewall_enabled":   fw.config.EnableFirewall,
		"logging_enabled":    fw.config.EnableLogging,
		"rate_limit":         fw.config.RateLimitRPS,
		"banned_ips":         len(fw.config.BannedIPs),
		"allowed_ips":        len(fw.config.AllowedIPs),
		"allowed_uas":        len(fw.config.AllowedUAs),
		"temporary_bans":     len(fw.config.TemporaryBans),
		"rate_stats":         fw.rateLimiter.GetStats(),
		"log_stats":          fw.logger.GetLogStats(),
	}
}
